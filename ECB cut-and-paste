In this challenge, we implemented an ECB cut-and-paste attack to create a profile with elevated privileges. This exercise highlights the vulnerabilities of ECB mode and demonstrates how attackers can exploit its predictability to manipulate encrypted data.

Implementation

We start by implementing a routine to parse key-value pairs from a structured string, and then create a function to encode a user profile in this format, given an email address. We also create functions to encrypt and decrypt these profiles using AES-128 in ECB mode.

Parsing and Encoding

First, we define a function to parse key-value pairs from a string:

```python
def parse_kv(string):
    return dict(pair.split('=') for pair in string.split('&'))

print(parse_kv("foo=bar&baz=qux&zap=zazzle"))
```

This function takes a string like `"foo=bar&baz=qux&zap=zazzle"` and converts it into a dictionary:

```python
{'foo': 'bar', 'baz': 'qux', 'zap': 'zazzle'}
```

Next, we create a function to generate user profiles:

```python
def profile_for(email):
    if '&' in email or '=' in email:
        raise ValueError("Invalid characters in email")
    profile = f"email={email}&uid=10&role=user"
    return profile

print(profile_for("foo@bar.com"))
```

This function ensures that the email address does not contain metacharacters (`&` and `=`), then constructs and returns the profile string.

Encryption and Decryption

We generate a random AES key and implement padding functions:

```python
import random
from Crypto.Cipher import AES

BLOCK_SIZE = 16
KEY = bytes([random.randint(0, 255) for _ in range(16)])

def pkcs7_pad(data, block_size):
    pad_length = block_size - len(data) % block_size
    padding = bytes([pad_length] * pad_length)
    return data + padding

def pkcs7_unpad(data):
    pad_length = data[-1]
    if pad_length < 1 or pad_length > BLOCK_SIZE:
        raise ValueError("Invalid padding")
    for i in range(1, pad_length + 1):
        if data[-i] != pad_length:
            raise ValueError("Invalid padding")
    return data[:-pad_length]
```

We then define encryption and decryption functions for ECB mode:

```python
def ecb_encrypt(data, key):
    cipher = AES.new(key, AES.MODE_ECB)
    return cipher.encrypt(pkcs7_pad(data, BLOCK_SIZE))

def ecb_decrypt(data, key):
    cipher = AES.new(key, AES.MODE_ECB)
    return pkcs7_unpad(cipher.decrypt(data))
```

With these, we can now encrypt and decrypt user profiles:

```python
def encrypt_profile(profile):
    return ecb_encrypt(profile.encode(), KEY)

def decrypt_profile(ciphertext):
    decrypted = ecb_decrypt(ciphertext, KEY)
    return parse_kv(decrypted.decode())
```

We can test this by encrypting and decrypting a profile:

```python
profile = profile_for("foo@bar.com")
ciphertext = encrypt_profile(profile)
print(binascii.hexlify(ciphertext))

decrypted_profile = decrypt_profile(ciphertext)
print(decrypted_profile)
```

Creating an Admin Profile

The final part of this challenge involves creating a profile with `role=admin` by exploiting the predictability of ECB mode. We craft inputs such that the encrypted blocks can be rearranged to create the desired profile:

```python
def create_admin_profile():
    block_size = BLOCK_SIZE
    email_1 = "foo@bar.com"
    email_2 = "foobar@admin" + '\x0b' * 11  # pad "admin" to a full block

    encrypted_profile_1 = encrypt_profile(profile_for(email_1))
    encrypted_profile_2 = encrypt_profile(profile_for(email_2))

    encrypted_blocks_1 = [encrypted_profile_1[i:i + block_size] for i in range(0, len(encrypted_profile_1), block_size)]
    encrypted_blocks_2 = [encrypted_profile_2[i:i + block_size] for i in range(0, len(encrypted_profile_2), block_size)]

    admin_ciphertext = encrypted_blocks_1[0] + encrypted_blocks_1[1] + encrypted_blocks_2[1]

    return decrypt_profile(admin_ciphertext)
```

Here, we split the encrypted profiles into blocks and rearrange them to form the ciphertext of a profile with `role=admin`.

Running the Script

```python
# Parsing k=v
print(parse_kv("foo=bar&baz=qux&zap=zazzle"))

# Encoding profile
print(profile_for("foo@bar.com"))

# Encrypting profile
profile = profile_for("foo@bar.com")
ciphertext = encrypt_profile(profile)
print(binascii.hexlify(ciphertext))

# Decrypting profile
decrypted_profile = decrypt_profile(ciphertext)
print(decrypted_profile)

# Creating admin profile
admin_profile = create_admin_profile()
print(admin_profile)
```

Output

```plaintext
{'foo': 'bar', 'baz': 'qux', 'zap': 'zazzle'}
email=foo@bar.com&uid=10&role=user
b'656d61696c3d666f6f406261722e636f6d267569643d313026726f6c653d757365720b0b0b0b0b0b0b0b0b0b0b0b'
{'email': 'foo@bar.com', 'uid': '10', 'role': 'user'}
{'email': 'foo@bar.com', 'uid': '10', 'role': 'admin'}
```

Reflection

In this challenge, we demonstrated an ECB cut-and-paste attack by exploiting the deterministic nature of ECB mode. By carefully crafting inputs and rearranging encrypted blocks, we successfully created a profile with elevated privileges. This exercise underscores the importance of using more secure encryption modes like CBC or GCM to protect against such attacks.
